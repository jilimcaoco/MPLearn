
import sys
import argparse
import pandas as pd
import pyarrow.parquet
import pyarrow as pa
from MPLearn import embedding
from MPLearn.chemoinformatics import chemical_space

DESCRIPTION = """Embed a set of substances in chemical space
version 0.0.1

Example:
    cd MPProjects/KCNQ
    date_code=$(date '+%Y%m%d')
    embed_substances \
        --library_path raw_data/project_substances_${date_code}.sdf \
        --output_path intermediate_data/project_substances_${date_code}

    # generates:
    #   intermediate_data/
    #      
"""

def main(args):
    parser = argparse.ArgumentParser(description = DESCRIPTION)

    parser.add_argument(
        "--library_type",
        type = str,
        action = store,
        dest = library_type,
        default = None,
        help = "Type of library given at library path, options are 'tsv', 'sdf', or None, in which case it is inferred by the file extension")

    parser.add_argument(
        "--library_path",
        type = str,
        action = "store",
        dest = "library_path",
        help = ".tsv or .sdf of substances sampled from chemical space")

    # arguments for .sdf file
    # as a convience extract fields for substances from the sdf file and store
    # in output
    parser.add_argument(
        "--library_fields",
        nargs = "+",
        type = str,
        action = "store",
        dest = "library_fields",
        default = None,
        help = """Fields from the .sdf library that are stored in the results file (Default: all)""")
    parser.add_argument(
        "--smiles_field",
        type = str,
        action = "store",
        dest="smiles_field",
        default = "smiles",
        help = """If input is .tsv, this is the field name that contains the smiles""")
    parser.add_argument(
        "--output_path",
        type = str,
        action = "store",
        dest = "output_path",
        help = "output path for results")
        
    parser.add_argument(
	    "--fingerprint_type", type=str, action="store", dest="fingerprint_type", default="ECFP4",
        help="""Fingerprint type for the query and library compounds over which to compute the tanimoto similarity""")
    parser.add_argument(
        "--verbose", action="store_true", dest="verbose",
        help="""Give verbose output (Default: False)""")

    arguments = parser.parse_args()

    ######################
    # validate arguments #
    ######################
    if arguments.library_type is None:
        library_type = arguments.library_path.split(".")[-1]
    else:
        library_type = arguments.library_type
    if library_type == "tsv":
        if verbose:
            print("Parsing library as tab-separated value (tsv) table")
    elif library_type == "sdf":
        if verbose:
            print("Parsing library as a structure data (sdf) file")
    else:
        print(f"ERROR: Unrecognized library_path extension or specified file type '{library_path}'")
        print(f"Recognized extensions are 'tsv' and 'sdf'")
        exit(1)
                        
    ###################################
    # Get fingerprints for substances #
    ###################################

    if library_type == "sdf":
        fingerprints, substance_info = chemical_space.generate_fingerprints_sdf(
            library_path = arguments.library_path,
            library_fields = arguments.library_fields,
            fingerprint_type = arguments.fingerprint_type,
            verbose = arguments.verbose)
        substance_info.to_csv(f"{arguments.output_path}/substance_info.tsv", sep="\t")

    elif library_path == "tsv":
        substance_data = pd.read_csv(arguments.library_path, sep = "\t")
        fingerprints = chemical_space.generate_fingerprints(
            substance_data[arguments.smiles_field],
            fingerprint_type = arguments.fingerprint_type,
            verbose = arguments.verbose)
    else:
        print(f"ERROR: Unrecognized library_path extension or specified file type '{library_path}'")
        print(f"Recognized extensions are 'tsv' and 'sdf'")
        exit(1)
    
    if verbose:
        print(f"Generating embedding for {fingerprints.shape[0]} substances and saving it to '{arguments.output_path} ...")

    chemical_space_embedding = embedding.fit_embedding(
        dataset = fingerprints,
        embedding_dir = arguments.output_path)

    if verbose:
        print(f"Generating a embedding plot of the embedding and saving it at '{arguments.output_path}/embedding.png' ...")


    embedding.plot_embedding(
        embedding = chemical_space_embedding,
        output_fname = f"{arguments.output_path}/embedding.png",
        plot_width = 400,
        plot_height = 400,
        cmap = fire,
        background = "white")

    ################
    # Save results #
    ################
    pa.parquet.write_table(
        table=fingerprints,
        where = f"{arguments.output_path}/fingerprints.parquet")



if __name__ == '__main__':
   main(
       argv = sys.argv,
       output = sys.stdout,
       log = log)
